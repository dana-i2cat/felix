#!/bin/bash

###
#       @author: msune, CarolinaFernandez
#	@organization: i2CAT
#	@project: Ofelia FP7
#	@description: install module 
###

#Inform user
printHeader "info#" "Using default install module..."

#Constants
SRC_DIR=/opt/ofelia/ofam
TMP_PATH=$PWD

##Main routing

#Install dependencies
printHeader ">" "Installing dependencies through apt-get..."

source $CURRENT_DIRECTORY/lib/dependencies || error "Cannot import dependencies file" $NO_RESCUE
/usr/bin/apt-get update || error "Could not update repositories (apt-get). Do you have connectivity?" $NO_RESCUE 
/usr/bin/apt-get -y install $DEBIAN_DEPENDENCIES || error "Could not install dependencies (apt-get)" $NO_RESCUE 


#apt-get start nginx => stop it
/usr/sbin/service nginx stop

printHeader ">" "Installing FOAM..."

# Create OFAM files on-the-fly
cd $SRC_DIR/src || error "Could not install FOAM wrapper" $NO_RESCUE
python install.py || error "Could not install FOAM wrapper" $NO_RESCUE

printHeader ">" "Downloading certificates for nginx..."

# Download the needed certificates
wget http://www.pgeni.gpolab.bbn.com/ca-cert/pgeni.gpolab.bbn.com.pem -O $SRC_DIR/local/etc/gcf-ca-certs/pgeni.gpolab.bbn.com.pem || error "Could not download certificates for nginx" $NO_RESCUE

# Rebuild the nginx CA cert bundle
printHeader ">" "Bundling certificates for nginx..."
print "Some help to fill it up..."
print " "
print $'\tPassword: \t\t\tpassword for FOAM (user \'foamadmin\'; default password: \'admin\')'
print " "
/usr/local/bin/foamctl admin:bundle-certs

# Add at least one trusted certificate for FOAM, if none present
# This is done in order to be able to start Nginx
if [ -f /etc/nginx/trusted ]; then
    if [[ $(cat /etc/nginx/trusted) == "" ]]; then
        if [ -f /etc/nginx/sites-available/foam.conf ]; then
            server_ssl_certificate=$(cat /etc/nginx/sites-available/foam.conf | grep "[^#]ssl_certificate " | cut -d ";" -f 1 | sed -e "s/ssl_certificate//g" | sed -e "s/ //g")
            cat $server_ssl_certificate >> /etc/nginx/trusted
        fi
    fi
fi

# In order to avoid conflicts with FOAM config file...
printHeader ">" "Taking care of default configuration for nginx sites-enabled..."

# Symlink to sites-available (normal case) => remove symlink
#if [ -s /etc/nginx/sites-enabled/default ] && [ -f /etc/nginx/sites-available/default ]; then
if [ -s /etc/nginx/sites-enabled/default ]; then
    rm /etc/nginx/sites-enabled/default || error "Could not remove '/etc/nginx/sites-enabled/default'"
fi
# File with single copy => rename using timestamp and move
if [ -f /etc/nginx/sites-enabled/default ]; then
    backup_nginx_conf=default.bak-`date +"%d_%m_%y-%R"`
    print "Backing nginx config file up: /etc/nginx/sites-enabled/default => /etc/nginx/sites-available/$backup_nginx_conf ..."
    mv /etc/nginx/sites-enabled/default /etc/nginx/sites-available/$backup_nginx_conf || error "Could not backup default configuration file for '/etc/nginx/sites-enabled/default'"
fi

cd $TMP_PATH

#Build ssl certs
source $CURRENT_DIRECTORY/lib/ssl

#Symlink application folder for error log (so we can access normally)
ln -s $SRC_DIR/local/log /var/log/apache2/ofam || error "Cannot create symbolic link: /var/log/apache2/ofam -> $SRC_DIR/local/log" $NO_RESCUE

#Django settings 
source $CURRENT_DIRECTORY/lib/django-settings

# After the previous, 'localsettings.py' will be created.
# We need to import this from OFVER, so we make a symlink (untracked in GIT)
ln -sf $SRC_DIR/local/lib/foam/ofeliasettings/localsettings.py localsettings.py || error "Cannot create symbolic link: localsettings.py -> $SRC_DIR/local/lib/foam/ofeliasettings/localsettings.py" $NO_RESCUE

##Django database
#source $CURRENT_DIRECTORY/lib/django-db

