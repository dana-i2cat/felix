#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Feb 24 13:50:17 2014 by generateDS.py version 2.3b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_str_lower(self, instring):
            return instring.lower()
                    
                    

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
STRING_CLEANUP_PAT = re_.compile(r"[\n\r\s]+")

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class rspec(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, query=None, response=None):
        self.query = query
        self.response = response
    def factory(*args_, **kwargs_):
        if rspec.subclass:
            return rspec.subclass(*args_, **kwargs_)
        else:
            return rspec(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_query(self): return self.query
    def set_query(self, query): self.query = query
    def get_response(self): return self.response
    def set_response(self, response): self.response = response
    def export(self, outfile, level, namespace_='', name_='rspec', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='rspec')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='rspec'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='rspec'):
        if self.query:
            self.query.export(outfile, level, namespace_, name_='query', )
        if self.response:
            self.response.export(outfile, level, namespace_, name_='response', )
    def hasContent_(self):
        if (
            self.query is not None or
            self.response is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='rspec'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.query is not None:
            showIndent(outfile, level)
            outfile.write('query=model_.query(\n')
            self.query.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.response is not None:
            showIndent(outfile, level)
            outfile.write('response=model_.response(\n')
            self.response.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'query': 
            obj_ = query.factory()
            obj_.build(child_)
            self.set_query(obj_)
        elif nodeName_ == 'response': 
            obj_ = response.factory()
            obj_.build(child_)
            self.set_response(obj_)
# end class rspec


class query(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, provisioning=None, monitoring=None, information=None):
        self.provisioning = provisioning
        self.monitoring = monitoring
        self.information = information
    def factory(*args_, **kwargs_):
        if query.subclass:
            return query.subclass(*args_, **kwargs_)
        else:
            return query(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_provisioning(self): return self.provisioning
    def set_provisioning(self, provisioning): self.provisioning = provisioning
    def get_monitoring(self): return self.monitoring
    def set_monitoring(self, monitoring): self.monitoring = monitoring
    def get_information(self): return self.information
    def set_information(self, information): self.information = information
    def export(self, outfile, level, namespace_='', name_='query', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='query')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='query'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='query'):
        if self.provisioning:
            self.provisioning.export(outfile, level, namespace_, name_='provisioning', )
        if self.monitoring:
            self.monitoring.export(outfile, level, namespace_, name_='monitoring', )
        if self.information is not None:
            showIndent(outfile, level)
            outfile.write('<%sinformation>%s</%sinformation>\n' % (namespace_, self.gds_format_string(quote_xml(self.information).encode(ExternalEncoding), input_name='information'), namespace_))
    def hasContent_(self):
        if (
            self.provisioning is not None or
            self.monitoring is not None or
            self.information is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='query'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.provisioning is not None:
            showIndent(outfile, level)
            outfile.write('provisioning=model_.provisioning_type(\n')
            self.provisioning.exportLiteral(outfile, level, name_='provisioning')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.monitoring is not None:
            showIndent(outfile, level)
            outfile.write('monitoring=model_.monitoring_type(\n')
            self.monitoring.exportLiteral(outfile, level, name_='monitoring')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.information is not None:
            showIndent(outfile, level)
            outfile.write('information=%s,\n' % quote_python(self.information).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'provisioning': 
            obj_ = provisioning_type.factory()
            obj_.build(child_)
            self.set_provisioning(obj_)
        elif nodeName_ == 'monitoring': 
            obj_ = monitoring_type.factory()
            obj_.build(child_)
            self.set_monitoring(obj_)
        elif nodeName_ == 'information':
            information_ = child_.text
            self.information = information_
# end class query


class response(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, provisioning=None, monitoring=None, information=None):
        self.provisioning = provisioning
        self.monitoring = monitoring
        self.information = information
    def factory(*args_, **kwargs_):
        if response.subclass:
            return response.subclass(*args_, **kwargs_)
        else:
            return response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_provisioning(self): return self.provisioning
    def set_provisioning(self, provisioning): self.provisioning = provisioning
    def get_monitoring(self): return self.monitoring
    def set_monitoring(self, monitoring): self.monitoring = monitoring
    def get_information(self): return self.information
    def set_information(self, information): self.information = information
    def export(self, outfile, level, namespace_='', name_='response', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='response')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='response'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='response'):
        if self.provisioning:
            self.provisioning.export(outfile, level, namespace_, name_='provisioning', )
        if self.monitoring:
            self.monitoring.export(outfile, level, namespace_, name_='monitoring', )
        if self.information:
            self.information.export(outfile, level, namespace_, name_='information', )
    def hasContent_(self):
        if (
            self.provisioning is not None or
            self.monitoring is not None or
            self.information is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.provisioning is not None:
            showIndent(outfile, level)
            outfile.write('provisioning=model_.provisioning_type(\n')
            self.provisioning.exportLiteral(outfile, level, name_='provisioning')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.monitoring is not None:
            showIndent(outfile, level)
            outfile.write('monitoring=model_.monitoring_type(\n')
            self.monitoring.exportLiteral(outfile, level, name_='monitoring')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.information is not None:
            showIndent(outfile, level)
            outfile.write('information=model_.information_type(\n')
            self.information.exportLiteral(outfile, level, name_='information')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'provisioning': 
            obj_ = provisioning_type.factory()
            obj_.build(child_)
            self.set_provisioning(obj_)
        elif nodeName_ == 'monitoring': 
            obj_ = monitoring_type.factory()
            obj_.build(child_)
            self.set_monitoring(obj_)
        elif nodeName_ == 'information': 
            obj_ = information_type.factory()
            obj_.build(child_)
            self.set_information(obj_)
# end class response


class provisioning_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action=None):
        if action is None:
            self.action = []
        else:
            self.action = action
    def factory(*args_, **kwargs_):
        if provisioning_type.subclass:
            return provisioning_type.subclass(*args_, **kwargs_)
        else:
            return provisioning_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def add_action(self, value): self.action.append(value)
    def insert_action(self, index, value): self.action[index] = value
    def export(self, outfile, level, namespace_='', name_='provisioning-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='provisioning-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='provisioning-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='provisioning-type'):
        for action_ in self.action:
            action_.export(outfile, level, namespace_, name_='action')
    def hasContent_(self):
        if (
            self.action
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='provisioning-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('action=[\n')
        level += 1
        for action_ in self.action:
            showIndent(outfile, level)
            outfile.write('model_.provisioning_action_type(\n')
            action_.exportLiteral(outfile, level, name_='provisioning-action-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'action': 
            obj_ = provisioning_action_type.factory()
            obj_.build(child_)
            self.action.append(obj_)
# end class provisioning_type


class provisioning_action_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, id=None, server=None, status=None, description=None):
        self.type_ = _cast(None, type_)
        self.id = _cast(None, id)
        self.server = server
        self.status = status
        self.description = description
    def factory(*args_, **kwargs_):
        if provisioning_action_type.subclass:
            return provisioning_action_type.subclass(*args_, **kwargs_)
        else:
            return provisioning_action_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='provisioning-action-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='provisioning-action-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='provisioning-action-type'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='provisioning-action-type'):
        if self.server:
            self.server.export(outfile, level, namespace_, name_='server', )
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('<%sstatus>%s</%sstatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.status).encode(ExternalEncoding), input_name='status'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
    def hasContent_(self):
        if (
            self.server is not None or
            self.status is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='provisioning-action-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.server is not None:
            showIndent(outfile, level)
            outfile.write('server=model_.server_type(\n')
            self.server.exportLiteral(outfile, level, name_='server')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('status=%s,\n' % quote_python(self.status).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('type')
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        value = attrs.get('id')
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'server': 
            obj_ = server_type.factory()
            obj_.build(child_)
            self.set_server(obj_)
        elif nodeName_ == 'status':
            status_ = child_.text
            self.status = status_
        elif nodeName_ == 'description':
            description_ = child_.text
            self.description = description_
# end class provisioning_action_type


class server_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, id=None, uuid=None, operating_system_type=None, operating_system_version=None, operating_system_distribution=None, virtualization_type=None, interfaces=None, virtual_machines=None, status=None):
        self.name = name
        self.id = id
        self.uuid = uuid
        self.operating_system_type = operating_system_type
        self.operating_system_version = operating_system_version
        self.operating_system_distribution = operating_system_distribution
        self.virtualization_type = virtualization_type
        self.interfaces = interfaces
        if virtual_machines is None:
            self.virtual_machines = []
        else:
            self.virtual_machines = virtual_machines
        self.status = status
    def factory(*args_, **kwargs_):
        if server_type.subclass:
            return server_type.subclass(*args_, **kwargs_)
        else:
            return server_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_uuid(self): return self.uuid
    def set_uuid(self, uuid): self.uuid = uuid
    def get_operating_system_type(self): return self.operating_system_type
    def set_operating_system_type(self, operating_system_type): self.operating_system_type = operating_system_type
    def get_operating_system_version(self): return self.operating_system_version
    def set_operating_system_version(self, operating_system_version): self.operating_system_version = operating_system_version
    def get_operating_system_distribution(self): return self.operating_system_distribution
    def set_operating_system_distribution(self, operating_system_distribution): self.operating_system_distribution = operating_system_distribution
    def get_virtualization_type(self): return self.virtualization_type
    def set_virtualization_type(self, virtualization_type): self.virtualization_type = virtualization_type
    def get_interfaces(self): return self.interfaces
    def set_interfaces(self, interfaces): self.interfaces = interfaces
    def get_virtual_machines(self): return self.virtual_machines
    def set_virtual_machines(self, virtual_machines): self.virtual_machines = virtual_machines
    def add_virtual_machines(self, value): self.virtual_machines.append(value)
    def insert_virtual_machines(self, index, value): self.virtual_machines[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def export(self, outfile, level, namespace_='', name_='server-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='server-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='server-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='server-type'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('<%sid>%s</%sid>\n' % (namespace_, self.gds_format_string(quote_xml(self.id).encode(ExternalEncoding), input_name='id'), namespace_))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%suuid>%s</%suuid>\n' % (namespace_, self.gds_format_string(quote_xml(self.uuid).encode(ExternalEncoding), input_name='uuid'), namespace_))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-type>%s</%soperating-system-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_type).encode(ExternalEncoding), input_name='operating-system-type'), namespace_))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-version>%s</%soperating-system-version>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_version).encode(ExternalEncoding), input_name='operating-system-version'), namespace_))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-distribution>%s</%soperating-system-distribution>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_distribution).encode(ExternalEncoding), input_name='operating-system-distribution'), namespace_))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('<%svirtualization-type>%s</%svirtualization-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.virtualization_type).encode(ExternalEncoding), input_name='virtualization-type'), namespace_))
        if self.interfaces:
            self.interfaces.export(outfile, level, namespace_, name_='interfaces', )
        for virtual_machines_ in self.virtual_machines:
            virtual_machines_.export(outfile, level, namespace_, name_='virtual-machines')
        if self.status:
            self.status.export(outfile, level, namespace_, name_='status', )
    def hasContent_(self):
        if (
            self.name is not None or
            self.id is not None or
            self.uuid is not None or
            self.operating_system_type is not None or
            self.operating_system_version is not None or
            self.operating_system_distribution is not None or
            self.virtualization_type is not None or
            self.interfaces is not None or
            self.virtual_machines or
            self.status is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='server-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id=%s,\n' % quote_python(self.id).encode(ExternalEncoding))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('uuid=%s,\n' % quote_python(self.uuid).encode(ExternalEncoding))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_type=%s,\n' % quote_python(self.operating_system_type).encode(ExternalEncoding))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_version=%s,\n' % quote_python(self.operating_system_version).encode(ExternalEncoding))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_distribution=%s,\n' % quote_python(self.operating_system_distribution).encode(ExternalEncoding))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('virtualization_type=%s,\n' % quote_python(self.virtualization_type).encode(ExternalEncoding))
        if self.interfaces is not None:
            showIndent(outfile, level)
            outfile.write('interfaces=model_.interfaces_type(\n')
            self.interfaces.exportLiteral(outfile, level, name_='interfaces')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('virtual_machines=[\n')
        level += 1
        for virtual_machines_ in self.virtual_machines:
            showIndent(outfile, level)
            outfile.write('model_.virtual_machine_type(\n')
            virtual_machines_.exportLiteral(outfile, level, name_='virtual-machine-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('status=model_.server_status_type(\n')
            self.status.exportLiteral(outfile, level, name_='status')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'name':
            name_ = child_.text
            self.name = name_
        elif nodeName_ == 'id':
            id_ = child_.text
            self.id = id_
        elif nodeName_ == 'uuid':
            uuid_ = child_.text
            self.uuid = uuid_
        elif nodeName_ == 'operating-system-type':
            operating_system_type_ = child_.text
            self.operating_system_type = operating_system_type_
        elif nodeName_ == 'operating-system-version':
            operating_system_version_ = child_.text
            self.operating_system_version = operating_system_version_
        elif nodeName_ == 'operating-system-distribution':
            operating_system_distribution_ = child_.text
            self.operating_system_distribution = operating_system_distribution_
        elif nodeName_ == 'virtualization-type':
            virtualization_type_ = child_.text
            self.virtualization_type = virtualization_type_
        elif nodeName_ == 'interfaces': 
            obj_ = interfaces_type.factory()
            obj_.build(child_)
            self.set_interfaces(obj_)
        elif nodeName_ == 'virtual-machines': 
            obj_ = virtual_machine_type.factory()
            obj_.build(child_)
            self.virtual_machines.append(obj_)
        elif nodeName_ == 'status': 
            obj_ = server_status_type.factory()
            obj_.build(child_)
            self.set_status(obj_)
# end class server_type


class server_status_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if server_status_type.subclass:
            return server_status_type.subclass(*args_, **kwargs_)
        else:
            return server_status_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='server-status-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='server-status-type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='server-status-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='server-status-type'):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='server-status-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        pass
# end class server_status_type


class virtual_machine_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, uuid=None, status=None, project_id=None, project_name=None, slice_id=None, slice_name=None, operating_system_type=None, operating_system_version=None, operating_system_distribution=None, server_id=None, virtualization_type=None, xen_configuration=None):
        self.name = name
        self.uuid = uuid
        self.status = status
        self.project_id = project_id
        self.project_name = project_name
        self.slice_id = slice_id
        self.slice_name = slice_name
        self.operating_system_type = operating_system_type
        self.operating_system_version = operating_system_version
        self.operating_system_distribution = operating_system_distribution
        self.server_id = server_id
        self.virtualization_type = virtualization_type
        self.xen_configuration = xen_configuration
    def factory(*args_, **kwargs_):
        if virtual_machine_type.subclass:
            return virtual_machine_type.subclass(*args_, **kwargs_)
        else:
            return virtual_machine_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_uuid(self): return self.uuid
    def set_uuid(self, uuid): self.uuid = uuid
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_project_name(self): return self.project_name
    def set_project_name(self, project_name): self.project_name = project_name
    def get_slice_id(self): return self.slice_id
    def set_slice_id(self, slice_id): self.slice_id = slice_id
    def get_slice_name(self): return self.slice_name
    def set_slice_name(self, slice_name): self.slice_name = slice_name
    def get_operating_system_type(self): return self.operating_system_type
    def set_operating_system_type(self, operating_system_type): self.operating_system_type = operating_system_type
    def get_operating_system_version(self): return self.operating_system_version
    def set_operating_system_version(self, operating_system_version): self.operating_system_version = operating_system_version
    def get_operating_system_distribution(self): return self.operating_system_distribution
    def set_operating_system_distribution(self, operating_system_distribution): self.operating_system_distribution = operating_system_distribution
    def get_server_id(self): return self.server_id
    def set_server_id(self, server_id): self.server_id = server_id
    def get_virtualization_type(self): return self.virtualization_type
    def set_virtualization_type(self, virtualization_type): self.virtualization_type = virtualization_type
    def get_xen_configuration(self): return self.xen_configuration
    def set_xen_configuration(self, xen_configuration): self.xen_configuration = xen_configuration
    def export(self, outfile, level, namespace_='', name_='virtual-machine-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='virtual-machine-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='virtual-machine-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='virtual-machine-type'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%suuid>%s</%suuid>\n' % (namespace_, self.gds_format_string(quote_xml(self.uuid).encode(ExternalEncoding), input_name='uuid'), namespace_))
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('<%sstatus>%s</%sstatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.status).encode(ExternalEncoding), input_name='status'), namespace_))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sproject-id>%s</%sproject-id>\n' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project-id'), namespace_))
        if self.project_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sproject-name>%s</%sproject-name>\n' % (namespace_, self.gds_format_string(quote_xml(self.project_name).encode(ExternalEncoding), input_name='project-name'), namespace_))
        if self.slice_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sslice-id>%s</%sslice-id>\n' % (namespace_, self.gds_format_string(quote_xml(self.slice_id).encode(ExternalEncoding), input_name='slice-id'), namespace_))
        if self.slice_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sslice-name>%s</%sslice-name>\n' % (namespace_, self.gds_format_string(quote_xml(self.slice_name).encode(ExternalEncoding), input_name='slice-name'), namespace_))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-type>%s</%soperating-system-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_type).encode(ExternalEncoding), input_name='operating-system-type'), namespace_))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-version>%s</%soperating-system-version>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_version).encode(ExternalEncoding), input_name='operating-system-version'), namespace_))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-distribution>%s</%soperating-system-distribution>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_distribution).encode(ExternalEncoding), input_name='operating-system-distribution'), namespace_))
        if self.server_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sserver-id>%s</%sserver-id>\n' % (namespace_, self.gds_format_string(quote_xml(self.server_id).encode(ExternalEncoding), input_name='server-id'), namespace_))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('<%svirtualization-type>%s</%svirtualization-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.virtualization_type).encode(ExternalEncoding), input_name='virtualization-type'), namespace_))
        if self.xen_configuration:
            self.xen_configuration.export(outfile, level, namespace_, name_='xen-configuration', )
    def hasContent_(self):
        if (
            self.name is not None or
            self.uuid is not None or
            self.status is not None or
            self.project_id is not None or
            self.project_name is not None or
            self.slice_id is not None or
            self.slice_name is not None or
            self.operating_system_type is not None or
            self.operating_system_version is not None or
            self.operating_system_distribution is not None or
            self.server_id is not None or
            self.virtualization_type is not None or
            self.xen_configuration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='virtual-machine-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('uuid=%s,\n' % quote_python(self.uuid).encode(ExternalEncoding))
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('status=%s,\n' % quote_python(self.status).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.project_name is not None:
            showIndent(outfile, level)
            outfile.write('project_name=%s,\n' % quote_python(self.project_name).encode(ExternalEncoding))
        if self.slice_id is not None:
            showIndent(outfile, level)
            outfile.write('slice_id=%s,\n' % quote_python(self.slice_id).encode(ExternalEncoding))
        if self.slice_name is not None:
            showIndent(outfile, level)
            outfile.write('slice_name=%s,\n' % quote_python(self.slice_name).encode(ExternalEncoding))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_type=%s,\n' % quote_python(self.operating_system_type).encode(ExternalEncoding))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_version=%s,\n' % quote_python(self.operating_system_version).encode(ExternalEncoding))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_distribution=%s,\n' % quote_python(self.operating_system_distribution).encode(ExternalEncoding))
        if self.server_id is not None:
            showIndent(outfile, level)
            outfile.write('server_id=%s,\n' % quote_python(self.server_id).encode(ExternalEncoding))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('virtualization_type=%s,\n' % quote_python(self.virtualization_type).encode(ExternalEncoding))
        if self.xen_configuration is not None:
            showIndent(outfile, level)
            outfile.write('xen_configuration=model_.xen_configuration(\n')
            self.xen_configuration.exportLiteral(outfile, level, name_='xen_configuration')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'name':
            name_ = child_.text
            self.name = name_
        elif nodeName_ == 'uuid':
            uuid_ = child_.text
            self.uuid = uuid_
        elif nodeName_ == 'status':
            status_ = child_.text
            self.status = status_
        elif nodeName_ == 'project-id':
            project_id_ = child_.text
            self.project_id = project_id_
        elif nodeName_ == 'project-name':
            project_name_ = child_.text
            self.project_name = project_name_
        elif nodeName_ == 'slice-id':
            slice_id_ = child_.text
            self.slice_id = slice_id_
        elif nodeName_ == 'slice-name':
            slice_name_ = child_.text
            self.slice_name = slice_name_
        elif nodeName_ == 'operating-system-type':
            operating_system_type_ = child_.text
            self.operating_system_type = operating_system_type_
        elif nodeName_ == 'operating-system-version':
            operating_system_version_ = child_.text
            self.operating_system_version = operating_system_version_
        elif nodeName_ == 'operating-system-distribution':
            operating_system_distribution_ = child_.text
            self.operating_system_distribution = operating_system_distribution_
        elif nodeName_ == 'server-id':
            server_id_ = child_.text
            self.server_id = server_id_
        elif nodeName_ == 'virtualization-type':
            virtualization_type_ = child_.text
            self.virtualization_type = virtualization_type_
        elif nodeName_ == 'xen-configuration': 
            obj_ = xen_configuration.factory()
            obj_.build(child_)
            self.set_xen_configuration(obj_)
# end class virtual_machine_type


class xen_configuration(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, hd_setup_type=None, hd_size_mb=None, hd_origin_path=None, configurator=None, virtualization_setup_type=None, memory_mb=None, interfaces=None, users=None):
        self.hd_setup_type = hd_setup_type
        self.hd_size_mb = hd_size_mb
        self.hd_origin_path = hd_origin_path
        self.configurator = configurator
        self.virtualization_setup_type = virtualization_setup_type
        self.memory_mb = memory_mb
        self.interfaces = interfaces
        self.users = users
    def factory(*args_, **kwargs_):
        if xen_configuration.subclass:
            return xen_configuration.subclass(*args_, **kwargs_)
        else:
            return xen_configuration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_hd_setup_type(self): return self.hd_setup_type
    def set_hd_setup_type(self, hd_setup_type): self.hd_setup_type = hd_setup_type
    def get_hd_size_mb(self): return self.hd_size_mb
    def set_hd_size_mb(self, hd_size_mb): self.hd_size_mb = hd_size_mb
    def get_hd_origin_path(self): return self.hd_origin_path
    def set_hd_origin_path(self, hd_origin_path): self.hd_origin_path = hd_origin_path
    def get_configurator(self): return self.configurator
    def set_configurator(self, configurator): self.configurator = configurator
    def get_virtualization_setup_type(self): return self.virtualization_setup_type
    def set_virtualization_setup_type(self, virtualization_setup_type): self.virtualization_setup_type = virtualization_setup_type
    def get_memory_mb(self): return self.memory_mb
    def set_memory_mb(self, memory_mb): self.memory_mb = memory_mb
    def get_interfaces(self): return self.interfaces
    def set_interfaces(self, interfaces): self.interfaces = interfaces
    def get_users(self): return self.users
    def set_users(self, users): self.users = users
    def export(self, outfile, level, namespace_='', name_='xen-configuration', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='xen-configuration')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xen-configuration'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xen-configuration'):
        if self.hd_setup_type is not None:
            showIndent(outfile, level)
            outfile.write('<%shd-setup-type>%s</%shd-setup-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.hd_setup_type).encode(ExternalEncoding), input_name='hd-setup-type'), namespace_))
        if self.hd_size_mb is not None:
            showIndent(outfile, level)
            outfile.write('<%shd-size-mb>%s</%shd-size-mb>\n' % (namespace_, self.gds_format_integer(self.hd_size_mb, input_name='hd-size-mb'), namespace_))
        if self.hd_origin_path is not None:
            showIndent(outfile, level)
            outfile.write('<%shd-origin-path>%s</%shd-origin-path>\n' % (namespace_, self.gds_format_string(quote_xml(self.hd_origin_path).encode(ExternalEncoding), input_name='hd-origin-path'), namespace_))
        if self.configurator is not None:
            showIndent(outfile, level)
            outfile.write('<%sconfigurator>%s</%sconfigurator>\n' % (namespace_, self.gds_format_string(quote_xml(self.configurator).encode(ExternalEncoding), input_name='configurator'), namespace_))
        if self.virtualization_setup_type is not None:
            showIndent(outfile, level)
            outfile.write('<%svirtualization-setup-type>%s</%svirtualization-setup-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.virtualization_setup_type).encode(ExternalEncoding), input_name='virtualization-setup-type'), namespace_))
        if self.memory_mb is not None:
            showIndent(outfile, level)
            outfile.write('<%smemory-mb>%s</%smemory-mb>\n' % (namespace_, self.gds_format_integer(self.memory_mb, input_name='memory-mb'), namespace_))
        if self.interfaces:
            self.interfaces.export(outfile, level, namespace_, name_='interfaces', )
        if self.users:
            self.users.export(outfile, level, namespace_, name_='users', )
    def hasContent_(self):
        if (
            self.hd_setup_type is not None or
            self.hd_size_mb is not None or
            self.hd_origin_path is not None or
            self.configurator is not None or
            self.virtualization_setup_type is not None or
            self.memory_mb is not None or
            self.interfaces is not None or
            self.users is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='xen-configuration'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.hd_setup_type is not None:
            showIndent(outfile, level)
            outfile.write('hd_setup_type=%s,\n' % quote_python(self.hd_setup_type).encode(ExternalEncoding))
        if self.hd_size_mb is not None:
            showIndent(outfile, level)
            outfile.write('hd_size_mb=%d,\n' % self.hd_size_mb)
        if self.hd_origin_path is not None:
            showIndent(outfile, level)
            outfile.write('hd_origin_path=%s,\n' % quote_python(self.hd_origin_path).encode(ExternalEncoding))
        if self.configurator is not None:
            showIndent(outfile, level)
            outfile.write('configurator=%s,\n' % quote_python(self.configurator).encode(ExternalEncoding))
        if self.virtualization_setup_type is not None:
            showIndent(outfile, level)
            outfile.write('virtualization_setup_type=%s,\n' % quote_python(self.virtualization_setup_type).encode(ExternalEncoding))
        if self.memory_mb is not None:
            showIndent(outfile, level)
            outfile.write('memory_mb=%d,\n' % self.memory_mb)
        if self.interfaces is not None:
            showIndent(outfile, level)
            outfile.write('interfaces=model_.interfaces_type(\n')
            self.interfaces.exportLiteral(outfile, level, name_='interfaces')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.users is not None:
            showIndent(outfile, level)
            outfile.write('users=model_.users_type(\n')
            self.users.exportLiteral(outfile, level, name_='users')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'hd-setup-type':
            hd_setup_type_ = child_.text
            self.hd_setup_type = hd_setup_type_
        elif nodeName_ == 'hd-size-mb':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            self.hd_size_mb = ival_
        elif nodeName_ == 'hd-origin-path':
            hd_origin_path_ = child_.text
            self.hd_origin_path = hd_origin_path_
        elif nodeName_ == 'configurator':
            configurator_ = child_.text
            self.configurator = configurator_
        elif nodeName_ == 'virtualization-setup-type':
            virtualization_setup_type_ = child_.text
            self.virtualization_setup_type = virtualization_setup_type_
        elif nodeName_ == 'memory-mb':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            self.memory_mb = ival_
        elif nodeName_ == 'interfaces': 
            obj_ = interfaces_type.factory()
            obj_.build(child_)
            self.set_interfaces(obj_)
        elif nodeName_ == 'users': 
            obj_ = users_type.factory()
            obj_.build(child_)
            self.set_users(obj_)
# end class xen_configuration


class interfaces_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, interface=None):
        if interface is None:
            self.interface = []
        else:
            self.interface = interface
    def factory(*args_, **kwargs_):
        if interfaces_type.subclass:
            return interfaces_type.subclass(*args_, **kwargs_)
        else:
            return interfaces_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_interface(self): return self.interface
    def set_interface(self, interface): self.interface = interface
    def add_interface(self, value): self.interface.append(value)
    def insert_interface(self, index, value): self.interface[index] = value
    def export(self, outfile, level, namespace_='', name_='interfaces-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='interfaces-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='interfaces-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='interfaces-type'):
        for interface_ in self.interface:
            interface_.export(outfile, level, namespace_, name_='interface')
    def hasContent_(self):
        if (
            self.interface
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='interfaces-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('interface=[\n')
        level += 1
        for interface_ in self.interface:
            showIndent(outfile, level)
            outfile.write('model_.interface_type(\n')
            interface_.exportLiteral(outfile, level, name_='interface-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'interface': 
            obj_ = interface_type.factory()
            obj_.build(child_)
            self.interface.append(obj_)
# end class interfaces_type


class interface_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ismgmt=None, name=None, mac=None, ip=None, mask=None, gw=None, dns1=None, dns2=None, switch_id=None, switch_port=None):
        self.ismgmt = _cast(bool, ismgmt)
        self.name = name
        self.mac = mac
        self.ip = ip
        self.mask = mask
        self.gw = gw
        self.dns1 = dns1
        self.dns2 = dns2
        self.switch_id = switch_id
        self.switch_port = switch_port
    def factory(*args_, **kwargs_):
        if interface_type.subclass:
            return interface_type.subclass(*args_, **kwargs_)
        else:
            return interface_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_mac(self): return self.mac
    def set_mac(self, mac): self.mac = mac
    def get_ip(self): return self.ip
    def set_ip(self, ip): self.ip = ip
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_gw(self): return self.gw
    def set_gw(self, gw): self.gw = gw
    def get_dns1(self): return self.dns1
    def set_dns1(self, dns1): self.dns1 = dns1
    def get_dns2(self): return self.dns2
    def set_dns2(self, dns2): self.dns2 = dns2
    def get_switch_id(self): return self.switch_id
    def set_switch_id(self, switch_id): self.switch_id = switch_id
    def get_switch_port(self): return self.switch_port
    def set_switch_port(self, switch_port): self.switch_port = switch_port
    def get_ismgmt(self): return self.ismgmt
    def set_ismgmt(self, ismgmt): self.ismgmt = ismgmt
    def export(self, outfile, level, namespace_='', name_='interface-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='interface-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='interface-type'):
        if self.ismgmt is not None and 'ismgmt' not in already_processed:
            already_processed.append('ismgmt')
            outfile.write(' ismgmt="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.ismgmt)), input_name='ismgmt'))
    def exportChildren(self, outfile, level, namespace_='', name_='interface-type'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.mac is not None:
            showIndent(outfile, level)
            outfile.write('<%smac>%s</%smac>\n' % (namespace_, self.gds_format_string(quote_xml(self.mac).encode(ExternalEncoding), input_name='mac'), namespace_))
        if self.ip is not None:
            showIndent(outfile, level)
            outfile.write('<%sip>%s</%sip>\n' % (namespace_, self.gds_format_string(quote_xml(self.ip).encode(ExternalEncoding), input_name='ip'), namespace_))
        if self.mask is not None:
            showIndent(outfile, level)
            outfile.write('<%smask>%s</%smask>\n' % (namespace_, self.gds_format_string(quote_xml(self.mask).encode(ExternalEncoding), input_name='mask'), namespace_))
        if self.gw is not None:
            showIndent(outfile, level)
            outfile.write('<%sgw>%s</%sgw>\n' % (namespace_, self.gds_format_string(quote_xml(self.gw).encode(ExternalEncoding), input_name='gw'), namespace_))
        if self.dns1 is not None:
            showIndent(outfile, level)
            outfile.write('<%sdns1>%s</%sdns1>\n' % (namespace_, self.gds_format_string(quote_xml(self.dns1).encode(ExternalEncoding), input_name='dns1'), namespace_))
        if self.dns2 is not None:
            showIndent(outfile, level)
            outfile.write('<%sdns2>%s</%sdns2>\n' % (namespace_, self.gds_format_string(quote_xml(self.dns2).encode(ExternalEncoding), input_name='dns2'), namespace_))
        if self.switch_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sswitch-id>%s</%sswitch-id>\n' % (namespace_, self.gds_format_string(quote_xml(self.switch_id).encode(ExternalEncoding), input_name='switch-id'), namespace_))
        if self.switch_port is not None:
            showIndent(outfile, level)
            outfile.write('<%sswitch-port>%s</%sswitch-port>\n' % (namespace_, self.gds_format_string(quote_xml(self.switch_port).encode(ExternalEncoding), input_name='switch-port'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.mac is not None or
            self.ip is not None or
            self.mask is not None or
            self.gw is not None or
            self.dns1 is not None or
            self.dns2 is not None or
            self.switch_id is not None or
            self.switch_port is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='interface-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ismgmt is not None and 'ismgmt' not in already_processed:
            already_processed.append('ismgmt')
            showIndent(outfile, level)
            outfile.write('ismgmt = %s,\n' % (self.ismgmt,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.mac is not None:
            showIndent(outfile, level)
            outfile.write('mac=%s,\n' % quote_python(self.mac).encode(ExternalEncoding))
        if self.ip is not None:
            showIndent(outfile, level)
            outfile.write('ip=%s,\n' % quote_python(self.ip).encode(ExternalEncoding))
        if self.mask is not None:
            showIndent(outfile, level)
            outfile.write('mask=%s,\n' % quote_python(self.mask).encode(ExternalEncoding))
        if self.gw is not None:
            showIndent(outfile, level)
            outfile.write('gw=%s,\n' % quote_python(self.gw).encode(ExternalEncoding))
        if self.dns1 is not None:
            showIndent(outfile, level)
            outfile.write('dns1=%s,\n' % quote_python(self.dns1).encode(ExternalEncoding))
        if self.dns2 is not None:
            showIndent(outfile, level)
            outfile.write('dns2=%s,\n' % quote_python(self.dns2).encode(ExternalEncoding))
        if self.switch_id is not None:
            showIndent(outfile, level)
            outfile.write('switch_id=%s,\n' % quote_python(self.switch_id).encode(ExternalEncoding))
        if self.switch_port is not None:
            showIndent(outfile, level)
            outfile.write('switch_port=%s,\n' % quote_python(self.switch_port).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ismgmt')
        if value is not None and 'ismgmt' not in already_processed:
            already_processed.append('ismgmt')
            if value in ('true', '1'):
                self.ismgmt = True
            elif value in ('false', '0'):
                self.ismgmt = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'name':
            name_ = child_.text
            self.name = name_
        elif nodeName_ == 'mac':
            mac_ = child_.text
            self.mac = mac_
        elif nodeName_ == 'ip':
            ip_ = child_.text
            self.ip = ip_
        elif nodeName_ == 'mask':
            mask_ = child_.text
            self.mask = mask_
        elif nodeName_ == 'gw':
            gw_ = child_.text
            self.gw = gw_
        elif nodeName_ == 'dns1':
            dns1_ = child_.text
            self.dns1 = dns1_
        elif nodeName_ == 'dns2':
            dns2_ = child_.text
            self.dns2 = dns2_
        elif nodeName_ == 'switch-id':
            switch_id_ = child_.text
            self.switch_id = switch_id_
        elif nodeName_ == 'switch-port':
            switch_port_ = child_.text
            self.switch_port = switch_port_
# end class interface_type


class users_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, user=None):
        if user is None:
            self.user = []
        else:
            self.user = user
    def factory(*args_, **kwargs_):
        if users_type.subclass:
            return users_type.subclass(*args_, **kwargs_)
        else:
            return users_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def add_user(self, value): self.user.append(value)
    def insert_user(self, index, value): self.user[index] = value
    def export(self, outfile, level, namespace_='', name_='users-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='users-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='users-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='users-type'):
        for user_ in self.user:
            user_.export(outfile, level, namespace_, name_='user')
    def hasContent_(self):
        if (
            self.user
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='users-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('user=[\n')
        level += 1
        for user_ in self.user:
            showIndent(outfile, level)
            outfile.write('model_.user_type(\n')
            user_.exportLiteral(outfile, level, name_='user-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'user': 
            obj_ = user_type.factory()
            obj_.build(child_)
            self.user.append(obj_)
# end class users_type


class user_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, password=None):
        self.name = name
        self.password = password
    def factory(*args_, **kwargs_):
        if user_type.subclass:
            return user_type.subclass(*args_, **kwargs_)
        else:
            return user_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def export(self, outfile, level, namespace_='', name_='user-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='user-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='user-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='user-type'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.password is not None:
            showIndent(outfile, level)
            outfile.write('<%spassword>%s</%spassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.password).encode(ExternalEncoding), input_name='password'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='user-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.password is not None:
            showIndent(outfile, level)
            outfile.write('password=%s,\n' % quote_python(self.password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'name':
            name_ = child_.text
            self.name = name_
        elif nodeName_ == 'password':
            password_ = child_.text
            self.password = password_
# end class user_type


class monitoring_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action=None):
        if action is None:
            self.action = []
        else:
            self.action = action
    def factory(*args_, **kwargs_):
        if monitoring_type.subclass:
            return monitoring_type.subclass(*args_, **kwargs_)
        else:
            return monitoring_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def add_action(self, value): self.action.append(value)
    def insert_action(self, index, value): self.action[index] = value
    def export(self, outfile, level, namespace_='', name_='monitoring-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='monitoring-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='monitoring-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='monitoring-type'):
        for action_ in self.action:
            action_.export(outfile, level, namespace_, name_='action')
    def hasContent_(self):
        if (
            self.action
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='monitoring-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('action=[\n')
        level += 1
        for action_ in self.action:
            showIndent(outfile, level)
            outfile.write('model_.monitoring_action_type(\n')
            action_.exportLiteral(outfile, level, name_='monitoring-action-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'action': 
            obj_ = monitoring_action_type.factory()
            obj_.build(child_)
            self.action.append(obj_)
# end class monitoring_type


class monitoring_action_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, id=None, server=None, status=None, description=None):
        self.type_ = _cast(None, type_)
        self.id = _cast(None, id)
        self.server = server
        self.status = status
        self.description = description
    def factory(*args_, **kwargs_):
        if monitoring_action_type.subclass:
            return monitoring_action_type.subclass(*args_, **kwargs_)
        else:
            return monitoring_action_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='monitoring-action-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='monitoring-action-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='monitoring-action-type'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='monitoring-action-type'):
        if self.server:
            self.server.export(outfile, level, namespace_, name_='server', )
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('<%sstatus>%s</%sstatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.status).encode(ExternalEncoding), input_name='status'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
    def hasContent_(self):
        if (
            self.server is not None or
            self.status is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='monitoring-action-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.server is not None:
            showIndent(outfile, level)
            outfile.write('server=model_.server_type(\n')
            self.server.exportLiteral(outfile, level, name_='server')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('status=%s,\n' % quote_python(self.status).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('type')
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        value = attrs.get('id')
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'server': 
            obj_ = server_type.factory()
            obj_.build(child_)
            self.set_server(obj_)
        elif nodeName_ == 'status':
            status_ = child_.text
            self.status = status_
        elif nodeName_ == 'description':
            description_ = child_.text
            self.description = description_
# end class monitoring_action_type


class information_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resources=None):
        self.resources = resources
    def factory(*args_, **kwargs_):
        if information_type.subclass:
            return information_type.subclass(*args_, **kwargs_)
        else:
            return information_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resources(self): return self.resources
    def set_resources(self, resources): self.resources = resources
    def export(self, outfile, level, namespace_='', name_='information-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='information-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='information-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='information-type'):
        if self.resources:
            self.resources.export(outfile, level, namespace_, name_='resources', )
    def hasContent_(self):
        if (
            self.resources is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='information-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.resources is not None:
            showIndent(outfile, level)
            outfile.write('resources=model_.resources_type(\n')
            self.resources.exportLiteral(outfile, level, name_='resources')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'resources': 
            obj_ = resources_type.factory()
            obj_.build(child_)
            self.set_resources(obj_)
# end class information_type


class resources_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, server=None):
        if server is None:
            self.server = []
        else:
            self.server = server
    def factory(*args_, **kwargs_):
        if resources_type.subclass:
            return resources_type.subclass(*args_, **kwargs_)
        else:
            return resources_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def add_server(self, value): self.server.append(value)
    def insert_server(self, index, value): self.server[index] = value
    def export(self, outfile, level, namespace_='', name_='resources-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='resources-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resources-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resources-type'):
        for server_ in self.server:
            server_.export(outfile, level, namespace_, name_='server')
    def hasContent_(self):
        if (
            self.server
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resources-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('server=[\n')
        level += 1
        for server_ in self.server:
            showIndent(outfile, level)
            outfile.write('model_.server_information_type(\n')
            server_.exportLiteral(outfile, level, name_='server-information-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'server': 
            obj_ = server_information_type.factory()
            obj_.build(child_)
            self.server.append(obj_)
# end class resources_type


class server_information_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, id=None, uuid=None, operating_system_type=None, operating_system_version=None, operating_system_distribution=None, virtualization_type=None, interfaces=None, virtual_machine=None, status=None):
        self.name = name
        self.id = id
        self.uuid = uuid
        self.operating_system_type = operating_system_type
        self.operating_system_version = operating_system_version
        self.operating_system_distribution = operating_system_distribution
        self.virtualization_type = virtualization_type
        self.interfaces = interfaces
        if virtual_machine is None:
            self.virtual_machine = []
        else:
            self.virtual_machine = virtual_machine
        self.status = status
    def factory(*args_, **kwargs_):
        if server_information_type.subclass:
            return server_information_type.subclass(*args_, **kwargs_)
        else:
            return server_information_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_uuid(self): return self.uuid
    def set_uuid(self, uuid): self.uuid = uuid
    def get_operating_system_type(self): return self.operating_system_type
    def set_operating_system_type(self, operating_system_type): self.operating_system_type = operating_system_type
    def get_operating_system_version(self): return self.operating_system_version
    def set_operating_system_version(self, operating_system_version): self.operating_system_version = operating_system_version
    def get_operating_system_distribution(self): return self.operating_system_distribution
    def set_operating_system_distribution(self, operating_system_distribution): self.operating_system_distribution = operating_system_distribution
    def get_virtualization_type(self): return self.virtualization_type
    def set_virtualization_type(self, virtualization_type): self.virtualization_type = virtualization_type
    def get_interfaces(self): return self.interfaces
    def set_interfaces(self, interfaces): self.interfaces = interfaces
    def get_virtual_machine(self): return self.virtual_machine
    def set_virtual_machine(self, virtual_machine): self.virtual_machine = virtual_machine
    def add_virtual_machine(self, value): self.virtual_machine.append(value)
    def insert_virtual_machine(self, index, value): self.virtual_machine[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def export(self, outfile, level, namespace_='', name_='server-information-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='server-information-type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='server-information-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='server-information-type'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('<%sid>%s</%sid>\n' % (namespace_, self.gds_format_string(quote_xml(self.id).encode(ExternalEncoding), input_name='id'), namespace_))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%suuid>%s</%suuid>\n' % (namespace_, self.gds_format_string(quote_xml(self.uuid).encode(ExternalEncoding), input_name='uuid'), namespace_))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-type>%s</%soperating-system-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_type).encode(ExternalEncoding), input_name='operating-system-type'), namespace_))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-version>%s</%soperating-system-version>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_version).encode(ExternalEncoding), input_name='operating-system-version'), namespace_))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('<%soperating-system-distribution>%s</%soperating-system-distribution>\n' % (namespace_, self.gds_format_string(quote_xml(self.operating_system_distribution).encode(ExternalEncoding), input_name='operating-system-distribution'), namespace_))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('<%svirtualization-type>%s</%svirtualization-type>\n' % (namespace_, self.gds_format_string(quote_xml(self.virtualization_type).encode(ExternalEncoding), input_name='virtualization-type'), namespace_))
        if self.interfaces:
            self.interfaces.export(outfile, level, namespace_, name_='interfaces', )
        for virtual_machine_ in self.virtual_machine:
            virtual_machine_.export(outfile, level, namespace_, name_='virtual-machine')
        if self.status:
            self.status.export(outfile, level, namespace_, name_='status', )
    def hasContent_(self):
        if (
            self.name is not None or
            self.id is not None or
            self.uuid is not None or
            self.operating_system_type is not None or
            self.operating_system_version is not None or
            self.operating_system_distribution is not None or
            self.virtualization_type is not None or
            self.interfaces is not None or
            self.virtual_machine or
            self.status is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='server-information-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id=%s,\n' % quote_python(self.id).encode(ExternalEncoding))
        if self.uuid is not None:
            showIndent(outfile, level)
            outfile.write('uuid=%s,\n' % quote_python(self.uuid).encode(ExternalEncoding))
        if self.operating_system_type is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_type=%s,\n' % quote_python(self.operating_system_type).encode(ExternalEncoding))
        if self.operating_system_version is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_version=%s,\n' % quote_python(self.operating_system_version).encode(ExternalEncoding))
        if self.operating_system_distribution is not None:
            showIndent(outfile, level)
            outfile.write('operating_system_distribution=%s,\n' % quote_python(self.operating_system_distribution).encode(ExternalEncoding))
        if self.virtualization_type is not None:
            showIndent(outfile, level)
            outfile.write('virtualization_type=%s,\n' % quote_python(self.virtualization_type).encode(ExternalEncoding))
        if self.interfaces is not None:
            showIndent(outfile, level)
            outfile.write('interfaces=model_.interfaces_type(\n')
            self.interfaces.exportLiteral(outfile, level, name_='interfaces')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('virtual_machine=[\n')
        level += 1
        for virtual_machine_ in self.virtual_machine:
            showIndent(outfile, level)
            outfile.write('model_.virtual_machine_type(\n')
            virtual_machine_.exportLiteral(outfile, level, name_='virtual-machine-type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.status is not None:
            showIndent(outfile, level)
            outfile.write('status=model_.server_information_status_type(\n')
            self.status.exportLiteral(outfile, level, name_='status')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'name':
            name_ = child_.text
            self.name = name_
        elif nodeName_ == 'id':
            id_ = child_.text
            self.id = id_
        elif nodeName_ == 'uuid':
            uuid_ = child_.text
            self.uuid = uuid_
        elif nodeName_ == 'operating-system-type':
            operating_system_type_ = child_.text
            self.operating_system_type = operating_system_type_
        elif nodeName_ == 'operating-system-version':
            operating_system_version_ = child_.text
            self.operating_system_version = operating_system_version_
        elif nodeName_ == 'operating-system-distribution':
            operating_system_distribution_ = child_.text
            self.operating_system_distribution = operating_system_distribution_
        elif nodeName_ == 'virtualization-type':
            virtualization_type_ = child_.text
            self.virtualization_type = virtualization_type_
        elif nodeName_ == 'interfaces': 
            obj_ = interfaces_type.factory()
            obj_.build(child_)
            self.set_interfaces(obj_)
        elif nodeName_ == 'virtual-machine': 
            obj_ = virtual_machine_type.factory()
            obj_.build(child_)
            self.virtual_machine.append(obj_)
        elif nodeName_ == 'status': 
            obj_ = server_information_status_type.factory()
            obj_.build(child_)
            self.set_status(obj_)
# end class server_information_type


class server_information_status_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if server_information_status_type.subclass:
            return server_information_status_type.subclass(*args_, **kwargs_)
        else:
            return server_information_status_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='server-information-status-type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='server-information-status-type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='server-information-status-type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='server-information-status-type'):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='server-information-status-type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        pass
# end class server_information_status_type


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rspec'
        rootClass = rspec
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    #sys.stdout.write('<?xml version="1.0" ?>\n')
    #rootObj.export(sys.stdout, 0, name_=rootTag, 
    #    namespacedef_='http://www.fp7-ofelia.eu/CF/vt_am/rspec')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rspec'
        rootClass = rspec
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    ##sys.stdout.write('<?xml version="1.0" ?>\n')
    ##rootObj.export(sys.stdout, 0, name_="rspec",
    ##    namespacedef_='http://www.fp7-ofelia.eu/CF/vt_am/rspec')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rspec'
        rootClass = rspec
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    ##sys.stdout.write('#from vtRspecInterface import *\n\n')
    ##sys.stdout.write('import vtRspecInterface as model_\n\n')
    ##sys.stdout.write('rootObj = model_.rootTag(\n')
    ##rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    ##sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "information-type",
    "interface-type",
    "interfaces-type",
    "monitoring-action-type",
    "monitoring-type",
    "provisioning-action-type",
    "provisioning-type",
    "query",
    "resources-type",
    "response",
    "rspec",
    "server-information-status-type",
    "server-information-type",
    "server-status-type",
    "server-type",
    "user-type",
    "users-type",
    "virtual-machine-type",
    "xen-configuration"
    ]
