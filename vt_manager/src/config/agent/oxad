#! /bin/sh
### BEGIN INIT INFO
# Provides:          fuppesd
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: UPnP Media Server
# Description:       Fuppes UPnP media server.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
DESC="Ofelia XEN Agent Daemon"
NAME=oxad
DAEMON="/etc/init.d/OfeliaLauncher.sh"
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME
PIDFILE="/var/run/OfeliaAgent.pid"

# Exit if the package is not installed
if [ ! -x "$DAEMON" ]; then
{
    echo "Couldn't find $DAEMON"
    exit 99
}
fi

# Is the service already running? If so, capture the process ID
if [ -f $PIDFILE ]; then
    PID=`cat $PIDFILE`
else
    PID=""
fi

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --exec $DAEMON --test > /dev/null \ || return 1
    start-stop-daemon --start --quiet --exec $DAEMON -- $DAEMON_ARGS \ || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --signal 2 --retry 5 --quiet --pidfile $PIDFILE 
    RETVAL="$?"
    if [ "${PID}" != "" ]; then
        kill ${PID} > /dev/null 2> /dev/null &
    fi
        rm -f ${PIDFILE}
    [ "$RETVAL" = 2 ] && return 2
    return "$RETVAL"
}

#
# Function to update templates at disk
# Arguments: --ofelia (its presence indicates this is an OFELIA island)
#
do_update_templates()
{
    # Retrieve arguments for function ($1: function name, $2: function argument)
    template_args=$2 #$@
    # Check if installation is for an OFELIA island
    # If either "--ofelia" or "--non-ofelia" are already an argument, do not ask further
    OFELIA="none"
    # --ofelia
    #if [ "$template_args" != "${--ofelia}" ]; then
    if [ "$template_args" = "--ofelia" ]; then
    #if [ "$args" =~ "ofelia" ]; then
        OFELIA=1
    # --non-ofelia
    elif [ "$template_args" = "--non-ofelia" ]; then
        OFELIA=0
        # TemplateDownloader interprets lack of arguments as a non-OFELIA installation
        template_args=""
    else
        while [ $OFELIA != "yes" ] && [ $OFELIA != "no" ] && [ $OFELIA != 1 ] && [ $OFELIA != 0 ]
        do
            echo "Is this an OFELIA installation? (yes/no):"
            read OFELIA
            if [ $OFELIA = yes ]; then
                OFELIA=1
                template_args="--ofelia"
            elif [ $OFELIA = no ]; then
                OFELIA=0
                template_args=""
            else
                echo "Not a valid option. Please say yes/no"
            fi
        done
    fi
    current_dir=$PWD
    cd /opt/ofelia/oxa/bin/utils/template_downloader
    python template_downloader.py $template_args
    cd $current_dir
}

#
# Function that checks the status of the service
#
do_check_status()
{
    if [ "${PID}" != "" ]; then
        STATUS="running (pid $PID)"
    else
        STATUS="NOT running"
    fi
    echo "$DESC $NAME is $STATUS."
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
          # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;

  update-templates)
    do_update_templates $@; exit $?
    ;;

  status)
    do_check_status; exit $?
    ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|update-templates|status}" >&2
    exit 3
    ;;
esac

