# Copyright 2014-2015 National Institute of Advanced Industrial Science and Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

1. Installation

TN-RM has been provided as a resource management application of eiSoil.
EiSoil code is available from the git repository:

      $ git clone https://github.com/EICT/eiSoil

You can install and setup in accroding with eiSoil documents.

TN-RM code is available from the git repository:

      $ git clone https://github.com/dana-i2cat/felix
      $ cp -Rp felix felix_tnrm
      $ cd felix_tnrm
      $ git checkout trangit-network
      $ cd ..
      $ cp -Rp felix_tnrm/modules/resource/manager/transit-network/src eiSoil/src/vendor/tnrm
      $ export TNRM_HOME=`pwd`

TN-RM need Jython, Apache CXF 2.7.10 and NSIv2 impllementation by AIST.
Jython, CXF are installed from the respective website:

      - http://www.jython.org/
      - http://cxf.apache.org/

NSIv2 code is provided as aist-nsi2-`date`.tar.gz with TNRM ($TNRM_HOME/src/vendor/tnrm/).
NSIv2 code is installed with reference to documents in the tar boll.

2. Setup

2.1 eiSoil

Please read eiSoil document.

2.2 config.xml
TN-RM must describe the end point of felix in the config.xml.
The format is as follows:

    if NSIv2 end point,
    <interface felix_domain_id="urn:publicid:IDN+fms:aist:tnrm+stp"
        felix_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        nsi_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        vlan="1700-1799"
        capacity="10000"
    />

    if GRE end point,
    <interface felix_domain_id="urn:publicid:IDN+fms:aist:tnrm+stp"
        felix_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        nsi_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        vlan="1700-1799"
        capacity="10000"

        type="ovsgre"
        sedev="eth1"
        address="172.21.100.15"
        dpid="0x10"
        ovsdb="tcp:127.0.0.1:44444"
        ryu="http://172.21.100.15:8080"
    />

    felix_domain_id:	felix domain identifier
    felix_stp_id:	felix stp (end point) identifier
    nsi_stp_id:		NSIv2 stp identifier
    vlan:		vlan id,  ex. "1000,2000-3000"
    capacity:		maximum transfer rate (bandwidth), Mbps

    type:		"ovsgre" just only
    sedev:		device name connect to stiting entity
    address:		local ip address connect to other gre host
    dpid:		dpid of open vSwitch 
    ovsdb:		ip address of database server in local ovs
    ryu:		ip address of ryu rest service

2.3 nsi2interface.py for NSIv2 parameters

Please note that to access the TN-RM you need Provider Agent or
Aggregator of NSIv2 running. Now this is configured in
nsi2interface.py and the following change must be made in order to
make the connection.

      pNSA = 'urn:ogf:network:aist.go.jp:2013:nsa'
      pURI='https://163.220.30.174:28443/nsi2/services/ConnectionProvider'
      rNSA = 'urn:ogf:network:aist.go.jp:2013:nsa'
      rURI = 'https://163.220.30.145:29081/nsi2_requester/services/ConnectionRequester'
      user = ''
      password = ''

      pNSA:	provider NSA
      pURI:	provider URI
      rNSA:	requester NSA
      rURI:	requester URI
      user:	user name
      password:	password

2.4 Open vSwitch for GRE Tunenel

Setting of OVS is generated by the following script:

      $	BR="ovs1799"
      $ DPID="0000000000000010"
      $ CONTROL="tcp:127.0.0.1:6633"
      $ OVSDB="ptcp:44444"
      $
      $ ovs-vsctl br-exists $BR
      $ if [ $? == 0 ]; then
      $    ovs-vsctl del-br $BR
      $ fi
      $ ovs-vsctl add-br $BR
      $ ovs-vsctl add-port $BR eth1  # connect to SE 
      $ ovs-vsctl set bridge $BR other-config:datapath-id=$DPID
      $ ovs-vsctl set-controller $BR $CONTROL
      $ ovs-vsctl set-manager $OVSDB

      BR:	bridge name of open vSwitch
      DPID:	datapath id of bridge
      CONTROL:	openflow controller, RYU is controller.
      OVSDB:	database server of open vSwitch

3. start up

3.1 proxy NSI server for NSIv2 service

      $ cd $TNRM_HOME/src/vendor/tnrm
      $ ./proxy.sh

      proxy.sh:
      LOGFILE=/tmp/test.log
      LIBS=jpywork:./
      NSI_HOME=/opt/nsi2/java
      LIBS=./
      LIBS=$LIBS:${NSI_HOME}/clientapi/build/jar/nsi2_client.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/build/jar/aist_upa.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/commons-logging-1.1.1.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/log4j-1.2.13.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/commons-io-2.4.jar
      for i in ${CXF_HOME}/lib/*.jar
      do
         LIBS=$LIBS:"$i"
      done
      export CLASSPATH=$LIBS
      JOPT='-Dpython.cachedir=tmp/cache -v'
      env CLASSPATH=$LIBS jython $JOPT proxy.py 2>&1 | tee $LOGFILE 

3.2 RYU rest service for GRE tunnel

at GRE server wich open vSwitch.

      $ ryu-manager $RYUDIR/ryu/app/ofctl_rest.py $TNRM_HOME//src/vendor/tnrm/gre-tnrm-rest.py
 

3.3 eiSoil invoke

      $ cd $TNRM_HOME
      $ python src/main.py
    	   
