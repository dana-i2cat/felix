from django.db import models
from expedient.common.xmlrpc_serverproxy.models import PasswordXMLRPCServerProxy
import httplib,urllib,base64

class FVServerProxy(PasswordXMLRPCServerProxy):
    name = models.CharField("FV name",max_length = 40)
    

    def get_switches(self):
        """
        Change from FV format to CH format
        """
        try:
            dpids = self.proxy.api.listDevices()
            infos = [self.proxy.api.getDeviceInfo(d) for d in dpids]
            return zip(dpids, infos)
        except Exception, e:
            import traceback
            traceback.print_exc()
            raise e
    
    def get_links(self):
        """
        Change from FV format to CH format
        """
        try:
            return [(l.pop("srcDPID"),
                 l.pop("srcPort"),
                 l.pop("dstDPID"),
                 l.pop("dstPort"),
                 l) for l in self.proxy.api.getLinks()]
        except Exception, e:
            import traceback
            traceback.print_exc()
            raise e
        
    def ping(self, str):
        try:
            return self.proxy.api.ping(str)
        except Exception, e:
            import traceback
            traceback.print_exc()
            raise e

class CallBackServerProxy(models.Model):
    '''
    Stores some information for simple callbacks.
    '''
    
    username = models.CharField(max_length=100)
    url = models.URLField("Server URL", max_length=1024, verify_exists=False)
    cookie = models.TextField()

    def __getattr__(self, name):
        if name == "proxy":
            from xmlrpclib import ServerProxy
            self.proxy = ServerProxy(self.url)
            return self.proxy
        else:
            return getattr(self.proxy, name)
        
    def is_available(self):
        '''Call the server's ping method, and see if we get a pong'''
        try:
            if self.ping("PING") == "PONG: PING":
                return True
        except Exception, e:
            import traceback
            print "Exception while pinging server: %s" % e
            traceback.print_exc()
        return False


    def topology_changed(argument): # this method is invoked whenever FlowVisor informs the opt-in manager that there are changes in the topology. J. Mingorance-Puga
    
        username="expedient" # until fixed, you must hardcode here the username of expedient
        password="expedient" # until fixed, you must hardcode here the password of expedient
        
        #####################################################################################################################
        
        body="<?xml version=\"1.0\"?> <methodCall> <methodName>topology_changed</methodName> <params><param><int>"+str(argument.cookie)+"</int></param></params> </methodCall>"
        
        base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
        authheader =  "Basic %s" % base64string # this encodes the username/password for basic HTTP authentication according to HTTP standar
        headers={"Authorization": authheader}
        
        # now the URL of the XML RPC  is split up in two parts, as httplib requires them to be fed separately (CRAP!)
        firstIndex=argument.url.find("//")
        lastIndex=argument.url.find("/",firstIndex+3,len(argument.url))
        if lastIndex==-1:
            lastIndex=len(argument.url)	
    		
        clearingHouseURL1=argument.url[firstIndex+2:lastIndex]
    	
        if lastIndex+1 < len(argument.url):
            clearingHouseURL2="/"+argument.url[lastIndex+1:len(argument.url)]
        else:
            clearingHouseURL2="";
    		
    
        connectionToClearingHouse= httplib.HTTPSConnection(clearingHouseURL1)
        connectionToClearingHouse.request("POST",clearingHouseURL2,body,headers) # sends the XMLRPC towards expedient
        
        response=connectionToClearingHouse.getresponse(); # gets the answer from expedient. if everything was fine expedient should be requesting the new topology
        
        print response.status #check these prints to see what failed...
        print response.reason
        print response.read()   
